#alpha_stay = {'state 1,1': 0, 'state 2,1': 0, 'state 2,2': 0}
alpha_stay = {}
alpha_Up = {}
alpha_Down = {}
alpha_Left = {}
alpha_Right = {}

'''
0 - state 1,1
1 - state 2,1
2 - state 2,2
'''

alpha_stay['state 1,1'] = 0 + 1 * (
    0.6 * (0)  # stay
    + 0.1 * (0)  # up
    + 0.1 * (0)  # down
    + 0.1 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_stay['state 2,1'] = 100 + 1 * (
    0.6 * (100)  # stay
    + 0.1 * (-100)  # up
    + 0.1 * (100)  # down
    + 0.1 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_stay['state 2,2'] = -100 + 1 * (
    0.6 * (-100)  # stay
    + 0.1 * (-100)  # up
    + 0.1 * (100)  # down
    + 0.1 * (-100)  # left
    + 0.1 * (-100)  # right
)

alpha_Up['state 1,1'] = 0 + 1 * (
    0.1 * (0)  # stay
    + 0.6 * (0)  # up
    + 0.1 * (0)  # down
    + 0.1 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_Up['state 2,1'] = 100 + 1 * (
    0.1 * (100)  # stay
    + 0.6 * (-100)  # up
    + 0.1 * (100)  # down
    + 0.1 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_Up['state 2,2'] = -100 + 1 * (
    0.1 * (-100)  # stay
    + 0.6 * (-100)  # up
    + 0.1 * (100)  # down
    + 0.1 * (-100)  # left
    + 0.1 * (-100)  # right
)

alpha_Down['state 1,1'] = 0 + 1 * (
    0.1 * (0)  # stay
    + 0.1 * (0)  # up
    + 0.6 * (0)  # down
    + 0.1 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_Down['state 2,1'] = 100 + 1 * (
    0.1 * (100)  # stay
    + 0.1 * (-100)  # up
    + 0.6 * (100)  # down
    + 0.1 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_Down['state 2,2'] = -100 + 1 * (
    0.1 * (-100)  # stay
    + 0.1 * (-100)  # up
    + 0.6 * (100)  # down
    + 0.1 * (-100)  # left
    + 0.1 * (-100)  # right
)

alpha_Left['state 1,1'] = 0 + 1 * (
    0.1 * (0)  # stay
    + 0.1 * (0)  # up
    + 0.1 * (0)  # down
    + 0.6 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_Left['state 2,1'] = 100 + 1 * (
    0.1 * (100)  # stay
    + 0.1 * (-100)  # up
    + 0.1 * (100)  # down
    + 0.6 * (0)  # left
    + 0.1 * (100)  # right
)

alpha_Left['state 2,2'] = -100 + 1 * (
    0.1 * (-100)  # stay
    + 0.1 * (-100)  # up
    + 0.1 * (100)  # down
    + 0.6 * (-100)  # left
    + 0.1 * (-100)  # right
)

alpha_Right['state 1,1'] = 0 + 1 * (
    0.1 * (0)  # stay
    + 0.1 * (0)  # up
    + 0.1 * (0)  # down
    + 0.1 * (0)  # left
    + 0.6 * (100)  # right
)

alpha_Right['state 2,1'] = 100 + 1 * (
    0.1 * (100)  # stay
    + 0.1 * (-100)  # up
    + 0.1 * (100)  # down
    + 0.1 * (0)  # left
    + 0.6 * (100)  # right
)

alpha_Right['state 2,2'] = -100 + 1 * (
    0.1 * (-100)  # stay
    + 0.1 * (-100)  # up
    + 0.1 * 100  # down
    + 0.1 * (-100)  # left
    + 0.6 * (-100)  # right
)


print('Stay  =', alpha_stay)
print('Left  =', alpha_Left)
print('Right =', alpha_Right)
print('Up    =', alpha_Up)
print('Down  =', alpha_Down)

actions = {'Stay':alpha_stay,
           'Up':alpha_Up,
           'Down':alpha_Down,
           'Left':alpha_Left,
           'Right':alpha_Right}


#print(actions)
#alpha_stay =        0.6*(0.685*0+0.26*100+.26(-100))  +0.1*(0.685*0+0.26*100+.26(-100)) +0.1*(0.685*0+0.26*100+.26(-100)) +0.1*(0.685*0+0.26*100+.26(-100)) +0.1*(0.685*100+0.26*(-100)+.26*(0))


import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import scipy.optimize
import functools

def plane(x, y, params):
    a = params[0]
    b = params[1]
    c = params[2]
    z = a*x + b*y + c
    return z

def error(params, points):
    result = 0
    for (x,y,z) in points:
        plane_z = plane(x, y, params)
        diff = abs(plane_z - z)
        result += diff**2
    return result

def cross(a, b):
    return [a[1]*b[2] - a[2]*b[1],
            a[2]*b[0] - a[0]*b[2],
            a[0]*b[1] - a[1]*b[0]]

'''points = [(1.1,2.1,8.1),
          (3.2,4.2,8.0),
          (5.3,1.3,8.2),
          ]
          '''

def plotPoints(points,ax,color):
    fun = functools.partial(error, points=points)
    params0 = [0, 0, 0]
    res = scipy.optimize.minimize(fun, params0)

    a = res.x[0]
    b = res.x[1]
    c = res.x[2]


    xs, ys, zs = zip(*points)
    ax.scatter(xs, ys, zs)

    point  = np.array([0.0, 0.0, c])
    normal = np.array(cross([1,0,a], [0,1,b]))
    d = -point.dot(normal)
    xx, yy = np.meshgrid([-100,200], [-100,200])
    z = (-normal[0] * xx - normal[1] * yy - d) * 1. /normal[2]
    ax.plot_surface(xx, yy, z, alpha=.2, color=color)



fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

#===============================

points = [(0.0,0.0,alpha_stay['state 1,1']),
          (100.0,0.0,alpha_stay['state 2,1']),
          (0,100.0,alpha_stay['state 2,2'])]

plotPoints(points,ax,[0,1,0])
#=======================================================================

points = [(0.0,0.0,alpha_Up['state 1,1']),
          (100.0,0.0,alpha_Up['state 2,1']),
          (0,100.0,alpha_Up['state 2,2'])]

plotPoints(points,ax,[0,0,1])


points = [(0.0,0.0,alpha_Down['state 1,1']),
          (100.0,0.0,alpha_Down['state 2,1']),
          (0,100.0,alpha_Down['state 2,2'])]

plotPoints(points,ax,[1,0,0])

points = [(0.0,0.0,alpha_Right['state 1,1']),
          (100.0,0.0,alpha_Right['state 2,1']),
          (0,100.0,alpha_Right['state 2,2'])]

plotPoints(points,ax,[0,1,1])

points = [(0.0,0.0,alpha_Left['state 1,1']),
          (100.0,0.0,alpha_Left['state 2,1']),
          (0,100.0,alpha_Left['state 2,2'])]

plotPoints(points,ax,[1,0,1])


ax.set_xlim(-200,200)
ax.set_ylim(-200,200)
ax.set_zlim(  -200,200)

plt.show()